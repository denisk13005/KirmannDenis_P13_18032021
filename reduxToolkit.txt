redux toolkit

npx create-react-app my-app --template redux

installer redux et react-redux et @reduxjs/toolkit

créer le store avec configureStore qui comprendra un objet reducer qui comprendra lui mm un objet

mettre en place le PROVIDER dans index

le reducer sert a modifier un état (initial ou maj) en fonction d'une action qu'on va définir ex : on a un état qui contient 2 tâches , on veut ajouter une tâche à notre état, on va passer l'action "ajouter une tâche à notre reducer qui retournera un nouvel état avec une tâche en plus 

chaque action a un nom mais aussi des données a ajouter au state (le payload) par exemple : action{ type :"ajouter", information : "ménage"}


pour résoudre les erreurs cors ajouter dans le package front : "proxy":"http://127.0.0.1:5000" (vidéo connecting back to front a 6.39mn)
concurrently a ajouter en package pour créer une seule commande pour ancer le front et le back(12 mn)


    useEffect(() => {
        let isMounted = true;
        const controller = new AbortController(); ==> empêcher la requête si le composant est démonté 

        const getUsers = async () => {
            try {
                const response = await axiosPrivate.get('/users', {
                    signal: controller.signal
                });
                console.log(response.data);
                isMounted && setUsers(response.data);
            } catch (err) {
                console.error(err);
                navigate('/login', { state: { from: location }, replace: true });
            }
        }

        getUsers();

        return () => {    ==> FONCTION DE NETTOYAGE quand le comosant est démonté
            isMounted = false;
            controller.abort();
        }
    }, [])


     Swagger. 

Parmi les éléments clés à spécifier pour chaque endpoint de l’API il faudra :

    La méthode HTTP (ex. : GET, POST, etc.)
    La route (ex. : /store/inventory)
    La description de ce à quoi correspond l’endpoint (ex. : Retour de l'inventaire des animaux de compagnie)
    Les paramètres possibles pour tenir compte des différents scénarios (ex. : itemId (facultatif) = ID de l'article spécifique à demander à la base de données d'inventaire).
    Les différentes réponses avec les codes de réponse correspondants qui ont un sens pour cet endpoint (ex. : 404 : réponse d'erreur d'article inconnu).




lever profile dans les endpoints

lever le body du delete et ajouter details dans l'url

patch

array pour la réponse get des transactions details

startdate end date sur le premier get

retour booleen sur delete